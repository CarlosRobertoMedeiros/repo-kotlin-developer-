import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
	id 'org.springframework.boot' version '3.2.0'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'org.jetbrains.kotlin.jvm' version '1.9.20'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.9.20'
	id 'org.openapi.generator' version "5.3.0"
	id "org.springdoc.openapi-gradle-plugin" version "1.8.0"
}





group = 'br.com.roberto'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation "org.springframework.boot:spring-boot-starter-actuator"
	implementation "org.springframework.boot:spring-boot-starter-data-jpa"
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	implementation group: 'com.h2database', name: 'h2', version: '2.2.224'
	implementation "com.zaxxer:HikariCP"
	implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.1.0'
	implementation group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: '2.16.0'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}



tasks.withType(KotlinCompile) {
	kotlinOptions {
		freeCompilerArgs += '-Xjsr305=strict'
		jvmTarget = '17'
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.register("generateOpenApiDocs1") {
	dependsOn("generateOpenApiDocs")
	doLast {
		openApi {
			outputDir.set(file("$buildDir/generated-src/openapi"))
			apiDocsUrl.set("src/main/resources/openapi.yml")
			//outputFileName.set("swagger.json")
			//packagesToScan = "br.com.roberto.microservicealunos.api"
			waitTimeInSeconds.set(10)
//			groupedApiMappings.set(["https://localhost:8080/v3/api-docs/groupA" to "swagger-groupA.json",
//									"https://localhost:8080/v3/api-docs/groupB" to "swagger-groupB.json"])
			customBootRun {
				args.set(["--spring.profiles.active=special"])
			}
		}
		// Lógica para gerar a documentação OpenAPI aqui
		// Isso pode incluir a execução do OpenAPI Generator ou outras ferramentas
		println("Gerando documentação OpenAPI...")
	}
}
//tasks {
//	forkedSpringBootRun {
//		doNotTrackState("See https://github.com/springdoc/springdoc-openapi-gradle-plugin/issues/102")
//	}
//}